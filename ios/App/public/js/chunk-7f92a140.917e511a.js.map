{"version":3,"sources":["webpack:///./node_modules/@codetrix-studio/capacitor-google-auth/dist/esm/web.js"],"names":["GoogleAuthWeb","super","document","getElementsByName","length","head","getElementsByTagName","script","createElement","type","defer","async","onload","this","platformJsLoaded","src","appendChild","webConfigured","gapiLoaded","Promise","resolve","window","gapiResolve","loadScript","addUserChangeListener","gapi","load","clientConfig","client_id","content","plugins","GoogleAuth","scopes","scope","join","auth2","init","reject","serverAuthCode","needsOfflineAccess","serverClientId","_a","offlineAccessResponse","getAuthInstance","grantOfflineAccess","code","signIn","googleUser","currentUser","get","reloadAuthResponse","user","getUserFrom","error","authResponse","accessToken","access_token","idToken","id_token","signOut","listen","notifyListeners","isSignedIn","profile","getBasicProfile","email","getEmail","familyName","getFamilyName","givenName","getGivenName","id","getId","imageUrl","getImageUrl","name","getName","getAuthResponse","authentication"],"mappings":"wpBAAA,iFAGO,MAAMA,UAAsB,OAC/B,cACIC,QAEJ,oBACI,MAAwB,qBAAbC,UACAA,SAASC,kBAAkB,2BAA2BC,OAAS,EAM9E,aACI,IAAIC,EAAOH,SAASI,qBAAqB,QAAQ,GAC7CC,EAASL,SAASM,cAAc,UACpCD,EAAOE,KAAO,kBACdF,EAAOG,OAAQ,EACfH,EAAOI,OAAQ,EACfJ,EAAOK,OAASC,KAAKC,iBACrBP,EAAOQ,IAAM,yCACbV,EAAKW,YAAYT,GAErB,OACSM,KAAKI,gBAEVJ,KAAKK,WAAa,IAAIC,QAAQC,IAE1BC,OAAOC,YAAcF,EACrBP,KAAKU,eAETV,KAAKW,yBAET,mBACIC,KAAKC,KAAK,QAAS,KACf,MAAMC,EAAe,CACjBC,UAAW1B,SAASC,kBAAkB,2BAA2B,GAAG0B,SAEvC,MAA7B,EAAOC,QAAQC,YAA0D,MAApC,EAAOD,QAAQC,WAAWC,SAC/DL,EAAaM,MAAQ,EAAOH,QAAQC,WAAWC,OAAOE,KAAK,MAE/DT,KAAKU,MAAMC,KAAKT,GAChBN,OAAOC,gBAGf,eACI,OAAO,IAAIH,QAAQR,MAAOS,EAASiB,KAC/B,IACI,IAAIC,EACAC,GAAqB,EACzB,IACIA,EAAiE,MAA5C,EAAOT,QAAQC,WAAWS,eAEnD,MAAOC,IAEP,GAAIF,EAAoB,CACpB,MAAMG,QAA8BjB,KAAKU,MAAMQ,kBAAkBC,qBACjEN,EAAiBI,EAAsBG,gBAGjCpB,KAAKU,MAAMQ,kBAAkBG,SAEvC,MAAMC,EAAatB,KAAKU,MAAMQ,kBAAkBK,YAAYC,MACxDV,SAEMQ,EAAWG,qBAErB,MAAMC,EAAOtC,KAAKuC,YAAYL,GAC9BI,EAAKb,eAAiBA,EACtBlB,EAAQ+B,GAEZ,MAAOE,GACHhB,EAAOgB,MAInB,gBACI,MAAMC,QAAqB7B,KAAKU,MAAMQ,kBAAkBK,YAAYC,MAAMC,qBAC1E,MAAO,CACHK,YAAaD,EAAaE,aAC1BC,QAASH,EAAaI,UAG9B,gBACI,OAAOjC,KAAKU,MAAMQ,kBAAkBgB,UAExC,oCACU9C,KAAKK,WACXO,KAAKU,MAAMQ,kBAAkBK,YAAYY,OAAOb,IAC5ClC,KAAKgD,gBAAgB,aAAcd,EAAWe,aAAejD,KAAKuC,YAAYL,GAAc,QAGpG,YAAYA,GACR,MAAMI,EAAO,GACPY,EAAUhB,EAAWiB,kBAC3Bb,EAAKc,MAAQF,EAAQG,WACrBf,EAAKgB,WAAaJ,EAAQK,gBAC1BjB,EAAKkB,UAAYN,EAAQO,eACzBnB,EAAKoB,GAAKR,EAAQS,QAClBrB,EAAKsB,SAAWV,EAAQW,cACxBvB,EAAKwB,KAAOZ,EAAQa,UACpB,MAAMtB,EAAeP,EAAW8B,iBAAgB,GAKhD,OAJA1B,EAAK2B,eAAiB,CAClBvB,YAAaD,EAAaE,aAC1BC,QAASH,EAAaI,UAEnBP","file":"js/chunk-7f92a140.917e511a.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n// @ts-ignore\nimport config from '../../../../../capacitor.config.json';\nexport class GoogleAuthWeb extends WebPlugin {\n    constructor() {\n        super();\n    }\n    get webConfigured() {\n        if (typeof document !== 'undefined') {\n            return document.getElementsByName('google-signin-client_id').length > 0;\n        }\n        else {\n            return false;\n        }\n    }\n    loadScript() {\n        var head = document.getElementsByTagName('head')[0];\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.defer = true;\n        script.async = true;\n        script.onload = this.platformJsLoaded;\n        script.src = 'https://apis.google.com/js/platform.js';\n        head.appendChild(script);\n    }\n    init() {\n        if (!this.webConfigured)\n            return;\n        this.gapiLoaded = new Promise(resolve => {\n            // HACK: Relying on window object, can't get property in gapi.load callback\n            window.gapiResolve = resolve;\n            this.loadScript();\n        });\n        this.addUserChangeListener();\n    }\n    platformJsLoaded() {\n        gapi.load('auth2', () => {\n            const clientConfig = {\n                client_id: document.getElementsByName('google-signin-client_id')[0].content\n            };\n            if (config.plugins.GoogleAuth != null && config.plugins.GoogleAuth.scopes != null) {\n                clientConfig.scope = config.plugins.GoogleAuth.scopes.join(' ');\n            }\n            gapi.auth2.init(clientConfig);\n            window.gapiResolve();\n        });\n    }\n    async signIn() {\n        return new Promise(async (resolve, reject) => {\n            try {\n                var serverAuthCode;\n                var needsOfflineAccess = false;\n                try {\n                    needsOfflineAccess = config.plugins.GoogleAuth.serverClientId != null;\n                }\n                catch (_a) {\n                }\n                if (needsOfflineAccess) {\n                    const offlineAccessResponse = await gapi.auth2.getAuthInstance().grantOfflineAccess();\n                    serverAuthCode = offlineAccessResponse.code;\n                }\n                else {\n                    await gapi.auth2.getAuthInstance().signIn();\n                }\n                const googleUser = gapi.auth2.getAuthInstance().currentUser.get();\n                if (needsOfflineAccess) {\n                    // HACK: AuthResponse is null if we don't do this when using grantOfflineAccess\n                    await googleUser.reloadAuthResponse();\n                }\n                const user = this.getUserFrom(googleUser);\n                user.serverAuthCode = serverAuthCode;\n                resolve(user);\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    }\n    async refresh() {\n        const authResponse = await gapi.auth2.getAuthInstance().currentUser.get().reloadAuthResponse();\n        return {\n            accessToken: authResponse.access_token,\n            idToken: authResponse.id_token\n        };\n    }\n    async signOut() {\n        return gapi.auth2.getAuthInstance().signOut();\n    }\n    async addUserChangeListener() {\n        await this.gapiLoaded;\n        gapi.auth2.getAuthInstance().currentUser.listen(googleUser => {\n            this.notifyListeners(\"userChange\", googleUser.isSignedIn() ? this.getUserFrom(googleUser) : null);\n        });\n    }\n    getUserFrom(googleUser) {\n        const user = {};\n        const profile = googleUser.getBasicProfile();\n        user.email = profile.getEmail();\n        user.familyName = profile.getFamilyName();\n        user.givenName = profile.getGivenName();\n        user.id = profile.getId();\n        user.imageUrl = profile.getImageUrl();\n        user.name = profile.getName();\n        const authResponse = googleUser.getAuthResponse(true);\n        user.authentication = {\n            accessToken: authResponse.access_token,\n            idToken: authResponse.id_token\n        };\n        return user;\n    }\n}\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}